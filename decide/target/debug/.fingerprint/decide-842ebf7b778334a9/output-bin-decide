{"message":"`main` function not found in crate `decide`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":14420,"line_start":1,"line_end":470,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"extern crate crypto;","highlight_start":1,"highlight_end":21},{"text":"use self::crypto::digest::Digest;","highlight_start":1,"highlight_end":34},{"text":"use self::crypto::sha1::Sha1;","highlight_start":1,"highlight_end":30},{"text":"use num_bigint::BigUint;","highlight_start":1,"highlight_end":25},{"text":"use serde::{Deserialize, Serialize};","highlight_start":1,"highlight_end":37},{"text":"use serde_json::{Result, Value};","highlight_start":1,"highlight_end":33},{"text":"use std::convert::{TryInto};","highlight_start":1,"highlight_end":29},{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"// Open questions:","highlight_start":1,"highlight_end":19},{"text":"//","highlight_start":1,"highlight_end":3},{"text":"// #1 what should the return type of decide() be?  It has to be able to return nothing, because","highlight_start":1,"highlight_end":96},{"text":"// the feature might be disabled/whatever.  It _might_ want to be able to return an error,","highlight_start":1,"highlight_end":91},{"text":"// because maybe there is bad config or something.  (we _could_, if we wanted to, validate","highlight_start":1,"highlight_end":91},{"text":"// on boot that a given feature was valid), but it might be hard to convince the compiler","highlight_start":1,"highlight_end":90},{"text":"// that there is no possibility of error.  So the return seems like it has to be either:","highlight_start":1,"highlight_end":89},{"text":"// Result<Option<Decision>> or Option<Decision> or CustomType, which would handle errors","highlight_start":1,"highlight_end":89},{"text":"// we want to return, if any, and also the \"nothing here\" case, and also potential ish with","highlight_start":1,"highlight_end":92},{"text":"// bad Contexts, etc..","highlight_start":1,"highlight_end":23},{"text":"//","highlight_start":1,"highlight_end":3},{"text":"// #2 events: have the caller handle them?","highlight_start":1,"highlight_end":43},{"text":"//","highlight_start":1,"highlight_end":3},{"text":"// #3 how to expose this to python/js/go","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn decide(fns: &[fn(f: &Feature, ctx: &Context) -> Result<DMRes>],","highlight_start":1,"highlight_end":71},{"text":"          f: &Feature,","highlight_start":1,"highlight_end":23},{"text":"          ctx: &Context) -> Result<Option<Decision>> {","highlight_start":1,"highlight_end":55},{"text":"    // TODO: decide whether decide should return a Result<Option<Decision>>, to","highlight_start":1,"highlight_end":80},{"text":"    // account for ill-defined Features or missing data on the Context. Probably","highlight_start":1,"highlight_end":81},{"text":"    // yes, but currently Decision also has an option on name/bucketing.  Maybe","highlight_start":1,"highlight_end":80},{"text":"    // decide should return a Result<Decision>?","highlight_start":1,"highlight_end":48},{"text":"    println!(\"calling decide on feature name: {:#?} with context:{:#?}\", f.name, ctx);","highlight_start":1,"highlight_end":87},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for fun in fns {","highlight_start":1,"highlight_end":21},{"text":"        let res = fun(&f, &ctx)?; // Should I let errors bubble up?  probably not.","highlight_start":1,"highlight_end":83},{"text":"        match res {","highlight_start":1,"highlight_end":20},{"text":"            DMRes::None => return Ok(None),","highlight_start":1,"highlight_end":44},{"text":"            DMRes::Pass(s) => {","highlight_start":1,"highlight_end":32},{"text":"                println!(\"decisionmaker passed: {}\", s);","highlight_start":1,"highlight_end":57},{"text":"                ()","highlight_start":1,"highlight_end":19},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            DMRes::Decided(d) => {","highlight_start":1,"highlight_end":35},{"text":"                println!(\"got a decision:{:#?}\", d);","highlight_start":1,"highlight_end":53},{"text":"                return Ok(Some(d))","highlight_start":1,"highlight_end":35},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    return Ok(None); // default open (just return nothing)","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn darkmode(f: &Feature, _ctx: &Context) -> Result<DMRes> {","highlight_start":1,"highlight_end":64},{"text":"    if f.enabled {","highlight_start":1,"highlight_end":19},{"text":"        return Ok(DMRes::Pass(\"darkmode:enabled\".to_string()));","highlight_start":1,"highlight_end":64},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        return Ok(DMRes::None);","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn locale(f: &Feature, _ctx: &Context) -> Result<DMRes> {","highlight_start":1,"highlight_end":62},{"text":"    if !f.enabled { // TODO: add locales to Feature, compare ctx.locale to that","highlight_start":1,"highlight_end":80},{"text":"        return Ok(DMRes::Pass(\"locale:fixme\".to_string()));","highlight_start":1,"highlight_end":60},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        return Ok(DMRes::Pass(\"locale:fixme\".to_string()));","highlight_start":1,"highlight_end":60},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn fractional_availability(f: &Feature, ctx: &Context) -> Result<DMRes> {","highlight_start":1,"highlight_end":78},{"text":"    let b_str = f.bucketing_string(ctx);","highlight_start":1,"highlight_end":41},{"text":"    let i = bucket(b_str);","highlight_start":1,"highlight_end":27},{"text":"    let flt = (i as f32) / 1000.0;","highlight_start":1,"highlight_end":35},{"text":"    let v = f.variants.iter().find(|x| x.lo <= flt && x.hi > flt);","highlight_start":1,"highlight_end":67},{"text":"    return match v {","highlight_start":1,"highlight_end":21},{"text":"        None => Ok(DMRes::Pass(\"frac_avail:not in variant\".to_string())),","highlight_start":1,"highlight_end":74},{"text":"        Some(variant) => Ok(DMRes::Decided(","highlight_start":1,"highlight_end":44},{"text":"            Decision {name: variant.name.clone(),","highlight_start":1,"highlight_end":50},{"text":"                      bucket: Some(i),","highlight_start":1,"highlight_end":39},{"text":"                      emit_event: false })),","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"//#[derive(Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":43},{"text":"pub struct Decider {","highlight_start":1,"highlight_end":21},{"text":"    features: Vec<Feature>,","highlight_start":1,"highlight_end":28},{"text":"    decisionmakers: Vec<fn(f: &Feature, ctx: &Context) -> Result<DMRes>>,","highlight_start":1,"highlight_end":74},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":41},{"text":"pub enum DMRes { // TODO: find a better nome","highlight_start":1,"highlight_end":45},{"text":"    Pass(String),      // I didn't make a decision because...","highlight_start":1,"highlight_end":62},{"text":"    None,              // response is nothing","highlight_start":1,"highlight_end":46},{"text":"    Decided(Decision), // actual decision.","highlight_start":1,"highlight_end":43},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug, Clone)]","highlight_start":1,"highlight_end":48},{"text":"pub struct Feature { // TODO: rationalize this and Experiments.","highlight_start":1,"highlight_end":64},{"text":"    id: u32,","highlight_start":1,"highlight_end":13},{"text":"    name: String,","highlight_start":1,"highlight_end":18},{"text":"    enabled: bool,","highlight_start":1,"highlight_end":19},{"text":"    start_ts: u32, // TODO: consider whether this should just be created_at","highlight_start":1,"highlight_end":76},{"text":"    stop_ts: u32,  // TODO: should we get rid of a version by creating a new one?","highlight_start":1,"highlight_end":82},{"text":"    version: u32,","highlight_start":1,"highlight_end":18},{"text":"    shuffle_version: u32,","highlight_start":1,"highlight_end":26},{"text":"    variants: Vec<Variant>,","highlight_start":1,"highlight_end":28},{"text":"    //platform_bitmask: u128, //TODO: should we make platform choice very fast?","highlight_start":1,"highlight_end":80},{"text":"    targeting: Option<TargetingTree>,","highlight_start":1,"highlight_end":38},{"text":"    overrides: Option<HashMap<String, TargetingTree>>,","highlight_start":1,"highlight_end":55},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl Feature {","highlight_start":1,"highlight_end":15},{"text":"    fn bucketing_string(&self, ctx: &Context) -> String{","highlight_start":1,"highlight_end":57},{"text":"        return format!(\"{}.{}.{}\", self.name, self.shuffle_version, ctx.user_id);","highlight_start":1,"highlight_end":82},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn decision_at(&self, i: i32) -> Option<Decision> {","highlight_start":1,"highlight_end":56},{"text":"        let f = (i as f32) / 1000.0;","highlight_start":1,"highlight_end":37},{"text":"        let v = self.variants.iter().find(|x| x.lo <= f && x.hi > f);","highlight_start":1,"highlight_end":70},{"text":"        return match v {","highlight_start":1,"highlight_end":25},{"text":"            None => None,","highlight_start":1,"highlight_end":26},{"text":"            Some(variant) => Some(Decision { name: variant.name.clone(), bucket: Some(i), emit_event: true })","highlight_start":1,"highlight_end":110},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn experiment_to_feature(exp: &Experiment) -> Feature {","highlight_start":1,"highlight_end":60},{"text":"    return Feature { // FIXME: surely there must be a better way","highlight_start":1,"highlight_end":65},{"text":"        id: exp.id,","highlight_start":1,"highlight_end":20},{"text":"        name: exp.name.clone(),","highlight_start":1,"highlight_end":32},{"text":"        enabled: exp.enabled,","highlight_start":1,"highlight_end":30},{"text":"        start_ts: exp.start_ts,","highlight_start":1,"highlight_end":32},{"text":"        stop_ts: exp.stop_ts,","highlight_start":1,"highlight_end":30},{"text":"        version: exp.experiment.experiment_version,","highlight_start":1,"highlight_end":52},{"text":"        shuffle_version: exp.experiment.shuffle_version,","highlight_start":1,"highlight_end":57},{"text":"        variants: exp.experiment.variants.clone(),","highlight_start":1,"highlight_end":51},{"text":"        targeting: exp.experiment.targeting.clone(),","highlight_start":1,"highlight_end":53},{"text":"        overrides: exp.experiment.overrides.clone(),","highlight_start":1,"highlight_end":53},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":41},{"text":"pub struct Experiment {","highlight_start":1,"highlight_end":24},{"text":"    id: u32,","highlight_start":1,"highlight_end":13},{"text":"    name: String,","highlight_start":1,"highlight_end":18},{"text":"    enabled: bool,","highlight_start":1,"highlight_end":19},{"text":"    version: String,","highlight_start":1,"highlight_end":21},{"text":"    r#type: ExperimentType,","highlight_start":1,"highlight_end":28},{"text":"    start_ts: u32,","highlight_start":1,"highlight_end":19},{"text":"    stop_ts: u32,","highlight_start":1,"highlight_end":18},{"text":"    experiment: InnerExperiment,","highlight_start":1,"highlight_end":33},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":41},{"text":"#[serde(rename_all(deserialize = \"snake_case\"))]","highlight_start":1,"highlight_end":49},{"text":"pub enum ExperimentType {","highlight_start":1,"highlight_end":26},{"text":"    RangeVariant,","highlight_start":1,"highlight_end":18},{"text":"    FeatureRollout, // FIXME: get rid of this after the great RangeVariant takeover.","highlight_start":1,"highlight_end":85},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":41},{"text":"pub struct InnerExperiment { // FIXME: better name, plzkkthxbai?","highlight_start":1,"highlight_end":65},{"text":"    variants: Vec<Variant>,  // TODO: figure out how to make a variable-length array in a struct, maybe?","highlight_start":1,"highlight_end":105},{"text":"    experiment_version: u32,","highlight_start":1,"highlight_end":29},{"text":"    shuffle_version: u32,","highlight_start":1,"highlight_end":26},{"text":"    bucket_val: String,","highlight_start":1,"highlight_end":24},{"text":"    overrides: Option<HashMap<String, TargetingTree>>,","highlight_start":1,"highlight_end":55},{"text":"    targeting: Option<TargetingTree>,","highlight_start":1,"highlight_end":38},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug, Clone)]","highlight_start":1,"highlight_end":48},{"text":"pub struct Variant {","highlight_start":1,"highlight_end":21},{"text":"    name: String,","highlight_start":1,"highlight_end":18},{"text":"    #[serde(rename = \"range_start\")]","highlight_start":1,"highlight_end":37},{"text":"    lo: f32,","highlight_start":1,"highlight_end":13},{"text":"    #[serde(rename = \"range_end\")]","highlight_start":1,"highlight_end":35},{"text":"    hi: f32,","highlight_start":1,"highlight_end":13},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(PartialEq, Eq, Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":56},{"text":"pub struct Decision {","highlight_start":1,"highlight_end":22},{"text":"    name: String,","highlight_start":1,"highlight_end":18},{"text":"    emit_event: bool,","highlight_start":1,"highlight_end":22},{"text":"    bucket: Option<i32>,","highlight_start":1,"highlight_end":25},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":41},{"text":"pub struct Context {  // FIXME: add other fields.","highlight_start":1,"highlight_end":50},{"text":"    user_id: i64, // FIXME: make this u64 after figuring out how to make range literals unsigned.","highlight_start":1,"highlight_end":98},{"text":"    locale: Option<String>,","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl Context {","highlight_start":1,"highlight_end":15},{"text":"    fn get_field(&self, field: &String) -> Option<String> {","highlight_start":1,"highlight_end":60},{"text":"        if field == \"user_id\" {","highlight_start":1,"highlight_end":32},{"text":"            Some(self.user_id.to_string())","highlight_start":1,"highlight_end":43},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return None;","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn cmp(&self, field: &String, value: &String) -> bool {","highlight_start":1,"highlight_end":60},{"text":"        let fo = self.get_field(field);","highlight_start":1,"highlight_end":40},{"text":"        match fo {","highlight_start":1,"highlight_end":19},{"text":"            None => false,","highlight_start":1,"highlight_end":27},{"text":"            Some(s) => &s == value, // TODO: make sure this isn't doing pointer compares.","highlight_start":1,"highlight_end":90},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"enum Comp {","highlight_start":1,"highlight_end":12},{"text":"    EQ,","highlight_start":1,"highlight_end":8},{"text":"    GT,","highlight_start":1,"highlight_end":8},{"text":"    LT,","highlight_start":1,"highlight_end":8},{"text":"    GE,","highlight_start":1,"highlight_end":8},{"text":"    LE,","highlight_start":1,"highlight_end":8},{"text":"    NE,","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Serialize, Deserialize, Debug, Clone)]","highlight_start":1,"highlight_end":48},{"text":"enum TargetingTree {","highlight_start":1,"highlight_end":21},{"text":"    NULL,","highlight_start":1,"highlight_end":10},{"text":"    ALL(Vec<TargetingTree>),","highlight_start":1,"highlight_end":29},{"text":"    ANY(Vec<TargetingTree>),","highlight_start":1,"highlight_end":29},{"text":"    NOT(Box<TargetingTree>),","highlight_start":1,"highlight_end":29},{"text":"    EQ { field: String, values: Vec<String> },","highlight_start":1,"highlight_end":47},{"text":"    GT { field: String, value: String },","highlight_start":1,"highlight_end":41},{"text":"    LT { field: String, value: String },","highlight_start":1,"highlight_end":41},{"text":"    GE { field: String, value: String },","highlight_start":1,"highlight_end":41},{"text":"    LE { field: String, value: String },","highlight_start":1,"highlight_end":41},{"text":"    NE { field: String, value: String },","highlight_start":1,"highlight_end":41},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl TargetingTree {","highlight_start":1,"highlight_end":21},{"text":"    fn eval(&self, ctx: &Context) -> bool{","highlight_start":1,"highlight_end":43},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            TargetingTree::NULL => true,","highlight_start":1,"highlight_end":41},{"text":"            TargetingTree::ALL(xs)  =>  xs.iter().all(|x| x.eval(ctx)),","highlight_start":1,"highlight_end":72},{"text":"            TargetingTree::ANY(xs)  =>  xs.iter().any(|x| x.eval(ctx)),","highlight_start":1,"highlight_end":72},{"text":"            TargetingTree::NOT(x)   =>  !x.eval(ctx),","highlight_start":1,"highlight_end":54},{"text":"            TargetingTree::EQ { field, values } => values.iter().any(|x| x == field),","highlight_start":1,"highlight_end":86},{"text":"            TargetingTree::GT { field, value } => ctx.cmp(&field, value),","highlight_start":1,"highlight_end":74},{"text":"            TargetingTree::LT { field, value } => field == value, // FIXME: fetch from ctx","highlight_start":1,"highlight_end":91},{"text":"            TargetingTree::GE { field, value } => field == value,","highlight_start":1,"highlight_end":66},{"text":"            TargetingTree::LE { field, value } => field == value,","highlight_start":1,"highlight_end":66},{"text":"            TargetingTree::NE { field, value } => field == value,","highlight_start":1,"highlight_end":66},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl Experiment {","highlight_start":1,"highlight_end":18},{"text":"    fn variant(&self, ctx: &Context) -> Option<Decision> {","highlight_start":1,"highlight_end":59},{"text":"        let b_str = self.bucketing_string(ctx);","highlight_start":1,"highlight_end":48},{"text":"        let i = bucket(b_str);","highlight_start":1,"highlight_end":31},{"text":"        return self.decision_at(i);","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn bucketing_string(&self, ctx: &Context) -> String{","highlight_start":1,"highlight_end":57},{"text":"        return format!(\"{}.{}.{}\", self.name, self.experiment.shuffle_version, ctx.user_id);","highlight_start":1,"highlight_end":93},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn decision_at(&self, i: i32) -> Option<Decision> {","highlight_start":1,"highlight_end":56},{"text":"        let f = (i as f32) / 1000.0;","highlight_start":1,"highlight_end":37},{"text":"        let v = self.experiment.variants.iter().find(|x| x.lo <= f && x.hi > f);","highlight_start":1,"highlight_end":81},{"text":"        return match v {","highlight_start":1,"highlight_end":25},{"text":"            None => None,","highlight_start":1,"highlight_end":26},{"text":"            Some(variant) => Some(Decision { name: variant.name.clone(), bucket: Some(i), emit_event: true })","highlight_start":1,"highlight_end":110},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn eval_targeting(&self, ctx: &Context) -> bool {","highlight_start":1,"highlight_end":54},{"text":"        // allowed returns whether this user _might_ be in the experiment.","highlight_start":1,"highlight_end":75},{"text":"        // it therefore defaults true, and returns false when something about","highlight_start":1,"highlight_end":78},{"text":"        // ctx indicates that this can't be an impression.","highlight_start":1,"highlight_end":59},{"text":"        match &self.experiment.targeting {","highlight_start":1,"highlight_end":43},{"text":"            Some(targeting_tree) => eval_bool(&targeting_tree, ctx),","highlight_start":1,"highlight_end":69},{"text":"            None => false","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn eval_overrides(&self, _v: &Value, _ctx: &Context) -> Option<Decision>{","highlight_start":1,"highlight_end":78},{"text":"        // overrides put a context into a given variant.","highlight_start":1,"highlight_end":57},{"text":"        //let v = self.experiment.variants.iter().find(|x| );","highlight_start":1,"highlight_end":62},{"text":"        return None;","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn bucket(bucketing_str: String) -> i32 { // FIXME: take in number of buckets as a param.","highlight_start":1,"highlight_end":90},{"text":"    let mut hasher = Sha1::new();","highlight_start":1,"highlight_end":34},{"text":"    hasher.input_str(&bucketing_str);","highlight_start":1,"highlight_end":38},{"text":"    let bigint = BigUint::parse_bytes(hasher.result_str().as_bytes(), 16);","highlight_start":1,"highlight_end":75},{"text":"    let res = match bigint {","highlight_start":1,"highlight_end":29},{"text":"        Some(v) => v % 1000u32,","highlight_start":1,"highlight_end":32},{"text":"        None => BigUint::from(9999u32),  // FIXME: don'T use sentinel out-of-range values to indicate error.","highlight_start":1,"highlight_end":109},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    let n_as_i32: i32 = res.try_into().unwrap(); // FIXME: get rid of the unwrap","highlight_start":1,"highlight_end":81},{"text":"    return n_as_i32;","highlight_start":1,"highlight_end":21},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn eval_bool(tt: &TargetingTree, ctx: &Context) -> bool {","highlight_start":1,"highlight_end":58},{"text":"    // evaluates a gob of JSON rep'd by a TargetingTree into a bool","highlight_start":1,"highlight_end":68},{"text":"    println!(\"eval'ing tt={:#?} ctx={:#?}\", tt, ctx);","highlight_start":1,"highlight_end":54},{"text":"    return tt.eval(ctx);","highlight_start":1,"highlight_end":25},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"    fn build_ctx() -> Context {","highlight_start":1,"highlight_end":32},{"text":"        return Context { user_id: 795244, locale: Some(\"US\".to_string()) };","highlight_start":1,"highlight_end":76},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn build_decider() -> Decider {","highlight_start":1,"highlight_end":36},{"text":"        let exp1 = build_exp();","highlight_start":1,"highlight_end":32},{"text":"        let exp2 = build_exp2();","highlight_start":1,"highlight_end":33},{"text":"        let f1 = experiment_to_feature(&exp1);","highlight_start":1,"highlight_end":47},{"text":"        let f2 = experiment_to_feature(&exp2);","highlight_start":1,"highlight_end":47},{"text":"        let disabled = Feature {","highlight_start":1,"highlight_end":33},{"text":"            name: \"disabled\".to_string(),","highlight_start":1,"highlight_end":42},{"text":"            enabled: false,","highlight_start":1,"highlight_end":28},{"text":"            ..f2.clone()","highlight_start":1,"highlight_end":25},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        return Decider {features: vec![f1, f2, disabled], decisionmakers: vec![darkmode, locale, fractional_availability]}","highlight_start":1,"highlight_end":123},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn build_exp() -> Experiment {","highlight_start":1,"highlight_end":35},{"text":"        let data = r#\"","highlight_start":1,"highlight_end":23},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"    \"enabled\": true,","highlight_start":1,"highlight_end":21},{"text":"    \"version\": \"2\",","highlight_start":1,"highlight_end":20},{"text":"    \"type\": \"range_variant\",","highlight_start":1,"highlight_end":29},{"text":"    \"start_ts\": 0,","highlight_start":1,"highlight_end":19},{"text":"    \"stop_ts\": 1999999999","highlight_start":1,"highlight_end":26},{"text":"    \"experiment\": {","highlight_start":1,"highlight_end":20},{"text":"        \"variants\": [","highlight_start":1,"highlight_end":22},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                \"name\": \"create_cta\",","highlight_start":1,"highlight_end":38},{"text":"                \"range_start\": 0,","highlight_start":1,"highlight_end":34},{"text":"                \"range_end\": 0.1","highlight_start":1,"highlight_end":33},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                \"name\": \"control_1\",","highlight_start":1,"highlight_end":37},{"text":"                \"range_start\": 0.9,","highlight_start":1,"highlight_end":36},{"text":"                \"range_end\": 1.0","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ],","highlight_start":1,"highlight_end":11},{"text":"        \"experiment_version\": 2,","highlight_start":1,"highlight_end":33},{"text":"        \"shuffle_version\": 0,","highlight_start":1,"highlight_end":30},{"text":"        \"bucket_val\": \"user_id\",","highlight_start":1,"highlight_end":33},{"text":"        \"log_bucketing\": false,","highlight_start":1,"highlight_end":32},{"text":"        \"overrides\": [","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                \"create_cta\": {","highlight_start":1,"highlight_end":32},{"text":"                    \"EQ\": {","highlight_start":1,"highlight_end":28},{"text":"                        \"field\": \"user_id\",","highlight_start":1,"highlight_end":44},{"text":"                        \"values\": [","highlight_start":1,"highlight_end":36},{"text":"                            \"1\"","highlight_start":1,"highlight_end":32},{"text":"                        ]","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                \"control_1\": {","highlight_start":1,"highlight_end":31},{"text":"                    \"EQ\": {","highlight_start":1,"highlight_end":28},{"text":"                        \"field\": \"user_id\",","highlight_start":1,"highlight_end":44},{"text":"                        \"values\": [","highlight_start":1,"highlight_end":36},{"text":"                            \"2\",","highlight_start":1,"highlight_end":33},{"text":"                            \"3\"","highlight_start":1,"highlight_end":32},{"text":"                        ]","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ],","highlight_start":1,"highlight_end":11},{"text":"        \"targeting\": {","highlight_start":1,"highlight_end":23},{"text":"            \"EQ\": {","highlight_start":1,"highlight_end":20},{"text":"                \"field\": \"app_name\",","highlight_start":1,"highlight_end":37},{"text":"                \"value\": \"android\"","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        \"subscribers\": [","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                \"email\": \"matt.knox@reddit.com\"","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ]","highlight_start":1,"highlight_end":10},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    \"id\": 2714,","highlight_start":1,"highlight_end":16},{"text":"    \"owner\": \"matt.knox@reddit.com\",","highlight_start":1,"highlight_end":37},{"text":"    \"name\": \"android_community_creation_post_composer_cta\"","highlight_start":1,"highlight_end":59},{"text":" }","highlight_start":1,"highlight_end":3},{"text":"\"#;","highlight_start":1,"highlight_end":4},{"text":"        let e: Experiment = serde_json::from_str(data).unwrap();","highlight_start":1,"highlight_end":65},{"text":"        println!(\"{:#?}\", e);","highlight_start":1,"highlight_end":30},{"text":"        return e","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn build_exp2() -> Experiment {","highlight_start":1,"highlight_end":36},{"text":"        let data = r#\"","highlight_start":1,"highlight_end":23},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    \"id\": 3,","highlight_start":1,"highlight_end":13},{"text":"    \"enabled\": true,","highlight_start":1,"highlight_end":21},{"text":"    \"name\": \"my_first\",","highlight_start":1,"highlight_end":24},{"text":"    \"version\": \"2\",","highlight_start":1,"highlight_end":20},{"text":"    \"type\": \"range_variant\",","highlight_start":1,"highlight_end":29},{"text":"    \"start_ts\": 0,","highlight_start":1,"highlight_end":19},{"text":"    \"stop_ts\": 1999999999,","highlight_start":1,"highlight_end":27},{"text":"    \"experiment\": {","highlight_start":1,"highlight_end":20},{"text":"        \"variants\": [","highlight_start":1,"highlight_end":22},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                \"name\": \"t1\",","highlight_start":1,"highlight_end":30},{"text":"                \"range_start\": 0.0,","highlight_start":1,"highlight_end":36},{"text":"                \"range_end\": 0.3","highlight_start":1,"highlight_end":33},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                \"name\": \"c1\",","highlight_start":1,"highlight_end":30},{"text":"                \"range_start\": 0.7,","highlight_start":1,"highlight_end":36},{"text":"                \"range_end\": 1.0","highlight_start":1,"highlight_end":33},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        ],","highlight_start":1,"highlight_end":11},{"text":"        \"experiment_version\": 2,","highlight_start":1,"highlight_end":33},{"text":"        \"shuffle_version\": 0,","highlight_start":1,"highlight_end":30},{"text":"        \"bucket_val\": \"user_id\",","highlight_start":1,"highlight_end":33},{"text":"        \"log_bucketing\": false,","highlight_start":1,"highlight_end":32},{"text":"        \"targeting\": {\"NE\": {\"field\": \"user_id\", \"value\": \"795244\"}},","highlight_start":1,"highlight_end":70},{"text":"        \"overrides\": {\"t1\": {\"EQ\": {\"field\": \"user_id\", \"values\": [\"795244\"]}}}","highlight_start":1,"highlight_end":80},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"\"#;","highlight_start":1,"highlight_end":4},{"text":"        let e: Experiment = serde_json::from_str(data).unwrap();","highlight_start":1,"highlight_end":65},{"text":"        return e","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn call_func() {","highlight_start":1,"highlight_end":21},{"text":"        assert_eq!(208, bucket(\"my_first.0.795244\".to_string()));","highlight_start":1,"highlight_end":66},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn call_variant_method() {","highlight_start":1,"highlight_end":31},{"text":"        let exp = build_exp2();","highlight_start":1,"highlight_end":32},{"text":"        let ctx = build_ctx();","highlight_start":1,"highlight_end":31},{"text":"        let dr_exp = Decision { name: \"t1\".to_string(), bucket: Some(208), emit_event: true};","highlight_start":1,"highlight_end":94},{"text":"        assert_eq!(dr_exp, exp.variant(&ctx).unwrap());","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn disable_stops_exp() {","highlight_start":1,"highlight_end":29},{"text":"        let ctx = build_ctx();","highlight_start":1,"highlight_end":31},{"text":"        let exp = build_exp2();","highlight_start":1,"highlight_end":32},{"text":"        let disabled_exp = Experiment {","highlight_start":1,"highlight_end":40},{"text":"            enabled: false,","highlight_start":1,"highlight_end":28},{"text":"            ..exp","highlight_start":1,"highlight_end":18},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let disabled_f = experiment_to_feature(&disabled_exp);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        assert_eq!(disabled_f.enabled, false);","highlight_start":1,"highlight_end":47},{"text":"        assert_eq!(None, decide(&[darkmode], &disabled_f, &ctx).unwrap());","highlight_start":1,"highlight_end":75},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn it_works() {","highlight_start":1,"highlight_end":20},{"text":"        assert_eq!(2 + 2, 4);","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `decide`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern crate crypto;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse self::crypto::digest::Digest;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse self::crypto::sha1::Sha1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::BigUint;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m470\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
